"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[900],{3286:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ApplicationState","title":"ApplicationState","description":"The ApplicationState class manages the overall state of the application, including rooms, doctors, patients, and appointments. It provides methods for adding, removing, saving, and loading application data.","source":"@site/docs/ApplicationState.md","sourceDirName":".","slug":"/ApplicationState","permalink":"/AppointmentManagementSystem/docs/ApplicationState","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"ApplicationState","sidebar_label":"ApplicationState","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Room Factory","permalink":"/AppointmentManagementSystem/docs/factories/RoomFactory"},"next":{"title":"FileIO","permalink":"/AppointmentManagementSystem/docs/FileIO"}}');var i=n(4848),o=n(8453);const s={title:"ApplicationState",sidebar_label:"ApplicationState",sidebar_position:4},r="ApplicationState",d={},c=[{value:"Features",id:"features",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"applicationstate",children:"ApplicationState"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"ApplicationState"})," class manages the overall state of the application, including rooms, doctors, patients, and appointments. It provides methods for adding, removing, saving, and loading application data."]}),"\n",(0,i.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Maintains in-memory lists of rooms, doctors, patients, and appointments."}),"\n",(0,i.jsx)(t.li,{children:"Supports adding and removing entities dynamically."}),"\n",(0,i.jsx)(t.li,{children:"Handles JSON-based persistence for application state."}),"\n",(0,i.jsx)(t.li,{children:"Ensures proper state linkage between doctors, patients, and their appointments."}),"\n",(0,i.jsx)(t.li,{children:"Uses private constructors to enforce singleton-like behavior."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Property"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"rooms"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"List<Room>"})}),(0,i.jsx)(t.td,{children:"List of all available rooms."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"doctors"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"List<Doctor>"})}),(0,i.jsx)(t.td,{children:"List of registered doctors."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"patients"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"List<Patient>"})}),(0,i.jsx)(t.td,{children:"List of registered patients."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"appointments"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"List<Appointment>"})}),(0,i.jsx)(t.td,{children:"List of all scheduled appointments."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public void addRoom(Room room)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Adds a new room to the system."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public void addDoctor(Doctor doctor)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Adds a new doctor to the system."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public void addPatient(Patient patient)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Adds a new patient to the system."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public void addAppointment(Appointment appointment)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Adds an appointment and updates the corresponding doctor and patient records."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public void removeRoom(Room room)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Removes a room from the system."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public void removeDoctor(Doctor doctor)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Removes a doctor from the system."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public void removePatient(Patient patient)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Removes a patient from the system."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public void removeAppointment(Appointment appointment)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Removes an appointment and updates the corresponding doctor and patient records."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public void saveState() throws JsonFileSaveException\n"})}),"\n",(0,i.jsx)(t.p,{children:"Saves the current application state to JSON files."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public static ApplicationState loadState() throws JsonFileLoadException\n"})}),"\n",(0,i.jsx)(t.p,{children:"Loads the application state from JSON files if they exist; otherwise, returns a new empty state."}),"\n",(0,i.jsx)(t.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'ApplicationState state = ApplicationState.loadState();\r\n\r\nDoctor doctor = new Doctor("John", "Doe", "john.doe@example.com");\r\nPatient patient = new Patient("English", "Jane", "Doe", "jane.doe@example.com", "123-456-7890", "123 Main St");\r\nRoom room = new Room("Room 101");\r\nAppointment appointment = Appointment.create(patient, doctor, room, LocalDateTime.now(), Duration.ofMinutes(30), "Checkup");\r\n\r\nstate.addDoctor(doctor);\r\nstate.addPatient(patient);\r\nstate.addRoom(room);\r\nstate.addAppointment(appointment);\r\n\r\nstate.saveState();\n'})}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"ApplicationState"})," class serves as a centralized storage and management unit for key application data, ensuring data persistence and structured access to doctors, patients, and appointments."]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(6540);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);